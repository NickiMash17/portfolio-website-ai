trigger:
    - main

variables:
  solution: 'portfolio-backend/PortfolioBackend.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  testProject: 'portfolio-backend/Tests/PortfolioBackend.Tests.csproj'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test Backend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        version: '8.0.x'
        includePreviewVersions: false
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore test dependencies'
      inputs:
        command: 'restore'
        projects: '$(testProject)'
        feedsToUse: 'select'
    
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'
    
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: '$(testProject)'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --results-directory $(Build.ArtifactStagingDirectory)/TestResults'
        publishTestResults: true
    
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/**/*.trx'
        mergeTestResults: true
        testRunTitle: 'Portfolio Backend Tests'
      condition: succeededOrFailed()
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.ArtifactStagingDirectory)/TestResults/**/coverage.cobertura.xml'
      condition: succeededOrFailed()
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish application'
      inputs:
        command: 'publish'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
        publishWebProjects: true
        zipAfterPublish: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/publish'
        artifactName: 'drop'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployBackend
    displayName: 'Deploy Backend to Azure App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              appName: '$(AZURE_WEBAPP_NAME)'
              package: '$(Pipeline.Workspace)/drop/**/*.zip'
              appSettings: |
                -ConnectionStrings__DefaultConnection "$(SQL_CONNECTION_STRING)"
                -MongoDB__ConnectionString "$(MONGO_CONNECTION_STRING)"
                -MongoDB__DatabaseName "PortfolioAnalytics"
                -Azure__CognitiveServices__Endpoint "$(COGNITIVE_SERVICES_ENDPOINT)"
                -Azure__CognitiveServices__Key "$(COGNITIVE_SERVICES_KEY)"
                -Azure__Storage__ConnectionString "$(STORAGE_CONNECTION_STRING)"
                -Azure__Storage__ContainerName "images"
                -Azure__Ad__TenantId "$(AZURE_AD_TENANT_ID)"
                -Azure__Ad__ClientId "$(AZURE_AD_CLIENT_ID)"
                -Azure__Ad__ClientSecret "$(AZURE_AD_CLIENT_SECRET)"
                -Jwt__Key "$(JWT_SECRET_KEY)"
                -Jwt__Issuer "$(JWT_ISSUER)"
                -Jwt__Audience "$(JWT_AUDIENCE)"
                -Cors__AllowedOrigins__0 "https://portfolio-frontend.azurestaticapps.net"
                -Cors__AllowedOrigins__1 "https://$(AZURE_WEBAPP_NAME).azurewebsites.net"
                -ASPNETCORE_ENVIRONMENT "Production"
                -ASPNETCORE_URLS "http://+:80;https://+:443"
    
  - deployment: DeployFrontend
    displayName: 'Deploy Frontend to Azure Static Web Apps'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureStaticWebApp@0
            displayName: 'Deploy to Azure Static Web Apps'
            inputs:
              app_location: '/'
              api_location: 'portfolio-backend'
              output_location: 'dist'
              azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN)'
              skip_app_build: false
              skip_api_build: true
              deployment_environment: 'production'
              app_build_command: 'npm run build'
              api_build_command: 'dotnet publish -c Release -o ./publish'
              app_artifact_location: 'dist'
              api_artifact_location: 'portfolio-backend/publish'

- stage: PostDeploy
  displayName: 'Post-Deployment Tests'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: HealthCheck
    displayName: 'Health Check'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: PowerShell@2
      displayName: 'Test API Health'
      inputs:
        targetType: 'inline'
        script: |
          $apiUrl = "https://$(AZURE_WEBAPP_NAME).azurewebsites.net/health"
          $response = Invoke-RestMethod -Uri $apiUrl -Method Get
          Write-Host "API Health Check: $($response | ConvertTo-Json)"
          
          if ($response.status -eq "healthy") {
            Write-Host "✅ API is healthy"
          } else {
            Write-Host "❌ API health check failed"
            exit 1
          }
    
    - task: PowerShell@2
      displayName: 'Test Projects API'
      inputs:
        targetType: 'inline'
        script: |
          $apiUrl = "https://$(AZURE_WEBAPP_NAME).azurewebsites.net/api/projects"
          $response = Invoke-RestMethod -Uri $apiUrl -Method Get
          Write-Host "Projects API Test: Retrieved $($response.Count) projects"
          
          if ($response.Count -ge 0) {
            Write-Host "✅ Projects API is working"
          } else {
            Write-Host "❌ Projects API test failed"
            exit 1
          }
    
    - task: PowerShell@2
      displayName: 'Test Swagger Documentation'
      inputs:
        targetType: 'inline'
        script: |
          $swaggerUrl = "https://$(AZURE_WEBAPP_NAME).azurewebsites.net/swagger"
          try {
            $response = Invoke-WebRequest -Uri $swaggerUrl -Method Get
            if ($response.StatusCode -eq 200) {
              Write-Host "✅ Swagger documentation is accessible"
            } else {
              Write-Host "❌ Swagger documentation test failed"
              exit 1
            }
          } catch {
            Write-Host "❌ Swagger documentation test failed: $($_.Exception.Message)"
            exit 1
          } 