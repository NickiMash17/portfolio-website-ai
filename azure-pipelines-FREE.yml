# üÜì FREE Azure Pipeline for Portfolio Website
# This pipeline deploys to Azure Static Web Apps (100% FREE)

trigger:
  - main

variables:
  frontendBuildCommand: 'npm ci && npm run build'
  outputLocation: 'dist'

stages:
- stage: Build
  displayName: 'Build Frontend'
  jobs:
  - job: BuildFrontend
    displayName: 'Build React App'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js 18.x'
      inputs:
        versionSpec: '18.x'
    
    - task: Npm@1
      displayName: 'Install dependencies'
      inputs:
        command: 'ci'
        workingDir: '$(System.DefaultWorkingDirectory)'
    
    - task: Npm@1
      displayName: 'Build frontend'
      inputs:
        command: 'custom'
        workingDir: '$(System.DefaultWorkingDirectory)'
        customCommand: 'run build'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: 'dist'
        artifactName: 'frontend-build'

- stage: Deploy
  displayName: 'Deploy to Azure Static Web Apps (FREE)'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployFrontend
    displayName: 'Deploy Frontend (FREE)'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureStaticWebApp@0
            displayName: 'Deploy to Azure Static Web Apps'
            inputs:
              app_location: '/'
              output_location: 'dist'
              azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN)'
              skip_app_build: true
              deployment_environment: 'production'

- stage: Test
  displayName: 'Test Deployment (FREE)'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: HealthCheck
    displayName: 'Test Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: PowerShell@2
      displayName: 'Test Frontend Accessibility'
      inputs:
        targetType: 'inline'
        script: |
          $frontendUrl = "https://$(AZURE_STATIC_WEB_APP_NAME).azurestaticapps.net"
          try {
            $response = Invoke-WebRequest -Uri $frontendUrl -Method Get -TimeoutSec 30
            if ($response.StatusCode -eq 200) {
              Write-Host "‚úÖ Frontend is accessible and working!"
              Write-Host "üåê Your portfolio is live at: $frontendUrl"
            } else {
              Write-Host "‚ùå Frontend test failed with status: $($response.StatusCode)"
              exit 1
            }
          } catch {
            Write-Host "‚ùå Frontend test failed: $($_.Exception.Message)"
            exit 1
          } 